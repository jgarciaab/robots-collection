{"version":3,"sources":["redux/robot/robot.types.js","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","redux/robot/robot.actions.js","reportWebVitals.js","redux/robot/robot.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["RobotActionTypes","REQUEST_ROBOTS","Card","props","className","alt","src","robot","id","name","email","CardList","robots","map","SearchBox","type","placeholder","onChange","onSearchChange","App","event","setState","searchField","target","value","state","this","onRequestRobots","filteredRobots","filter","toLowerCase","includes","Component","connect","requestRobots","dispatch","fetch","then","response","json","data","payload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","combineReducers","action","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"8TAIeA,EAJU,CACvBC,eAAgB,kBCGLC,G,MAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,QACJC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,4BAEL,mCAAML,EAAMI,MAAME,KAAlB,OACA,kCAAKN,EAAMI,MAAMG,MAAjB,YCLSC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,OAAOC,KAAI,SAAAN,GAAK,OACrB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,WCLVM,G,MAAY,SAAAX,GAAK,OAC5B,uBACEC,UAAU,aACVW,KAAK,SACLC,YAAY,gBACZC,SAAUd,EAAMe,mBCAdC,G,wDACJ,aAAe,IAAD,8BACZ,gBAWFD,eAAiB,SAAAE,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAV1C,EAAKC,MAAQ,CACXH,YAAa,IAJH,E,gEASZI,KAAKvB,MAAMwB,oB,+BAOH,IACAf,EAAWc,KAAKvB,MAAhBS,OACAU,EAAgBI,KAAKD,MAArBH,YACFM,EAAiBhB,EAAOiB,QAAO,SAAAtB,GAAK,OACxCA,EAAME,KAAKqB,cAAcC,SAAST,EAAYQ,kBAGhD,OACE,sBAAK1B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWc,eAAgBQ,KAAKR,iBAChC,cAAC,EAAD,CAAUN,OAAQgB,W,GA5BRI,cA8CHC,eAZS,SAACR,GACvB,MAAO,CACLb,OAAQa,EAAMS,cAActB,WAIL,SAACuB,GAC1B,MAAO,CACLR,gBAAiB,kBCjDQ,SAACQ,GAC5BC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIL,EAAS,CAAEpB,KAAMf,EAAiBC,eAAgBwC,QAASD,OD8CpDN,CAAcC,OAI1BF,CAA6Cd,GE3C7CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,+BCLRO,EAAgB,CACpBtC,OAAQ,ICCKuC,cAAgB,CAC7BjB,cDC2B,WAAoC,IAAnCT,EAAkC,uDAA1ByB,EAAeE,EAAW,uCAC9D,OAAQA,EAAOrC,MACb,KAAKf,EAAiBC,eACpB,OAAO,2BACFwB,GADL,IAEEb,OAAQwC,EAAOX,UAEnB,QACE,OAAOhB,METP4B,EAAc,CAACC,KAINC,EAFDC,YAAYC,EAAaC,IAAe,WAAf,EAAmBL,ICG1DM,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.d1263848.chunk.js","sourcesContent":["const RobotActionTypes = {\n  REQUEST_ROBOTS: 'REQUEST_ROBOTS'\n};\n\nexport default RobotActionTypes;","import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className='card-container'>\n    <img\n      alt='robot'\n      src={`https://robohash.org/${props.robot.id}?set=set2&size=180x180`}\n    />\n    <h2> {props.robot.name} </h2>\n    <p> {props.robot.email} </p>\n  </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className='card-list'>\n    {props.robots.map(robot => (\n      <Card key={robot.id} robot={robot} />\n    ))}\n  </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = props => (\n  <input\n    className='search-box'\n    type='search'\n    placeholder='search robots'\n    onChange={props.onSearchChange}\n  />\n);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { requestRobots } from './redux/robot/robot.actions'\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots } = this.props;\n    const { searchField } = this.state;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Robots Collection</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    robots: state.requestRobots.robots\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import RobotActionTypes from './robot.types';\n\nexport const requestRobots = (dispatch) => {\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: RobotActionTypes.REQUEST_ROBOTS, payload: data }))\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import RobotActionTypes from './robot.types';\n\nconst INITIAL_STATE = {\n  robots: [],\n};\n\nexport const requestRobots = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case RobotActionTypes.REQUEST_ROBOTS:\n      return {\n        ...state,\n        robots: action.payload,\n      };\n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\n\nimport { requestRobots } from './robot/robot.reducer';\n\nexport default combineReducers({\n  requestRobots: requestRobots\n});","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}